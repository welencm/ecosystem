#!/bin/bash

function display_help {
  echo "$(basename $0) - testing ansible roles in Docker containers"
  echo "Usage:"
  echo "  $(basename $0) [-i IMAGE_REGEX] ROLE"
}

# process input
while [ "$1" != "" ];
do
  case $1 in
    -h | --help)     display_help
                     exit 0
                     ;;
    -i | --images)   IMAGE_REGEX=$2
                     shift
                     shift
                     ;;
    *)               ROLE=$1
                     shift
  esac
done

# check input
if [[ -z "${ROLE}" ]]; then
  display_help
  exit 1
fi

if [[ ! -d "roles/${ROLE}" ]]; then
  echo "Role ${ROLE} doesn't exists"
  display_help
  exit 1
fi

PLAYBOOK=test.yml
cat <<EOT > ${PLAYBOOK}
---
- hosts: localhost
  roles:
    - ${ROLE}
EOT

declare -A SYNTAX_CHECK_RESULT FIRST_RUN_RESULT IDEMPOTENCE_RESULT FUNCT_RESULT
ART_IMAGES="welencm/art-centos-7 welencm/art-ubuntu-1604"

IMAGES=""
for IMAGE in ${ART_IMAGES}
do
  if [[ ${IMAGE} =~ .*${IMAGE_REGEX}.* ]]; then
    IMAGES="${IMAGES} ${IMAGE}"
  fi
done

for IMAGE in ${IMAGES}
do
  echo "[INFO] Starting tests on ${IMAGE}"
  # start container
  CONTAINER_ID=$(docker run --detach --volume "${PWD}:/ansible:ro" --volume "${PWD}/roles/${ROLE}/tests:/tests:ro" ${IMAGE}:latest /lib/systemd/systemd)
  echo "[INFO] Container id ${CONTAINER_ID}"

  # check syntax
  docker exec ${CONTAINER_ID} ansible-playbook -i /ansible/inventory-test /ansible/${PLAYBOOK} --syntax-check
  SYNTAX_CHECK_RESULT[${IMAGE}]=$?

  # first run test
  docker exec ${CONTAINER_ID} ansible-playbook -i /ansible/inventory-test /ansible/${PLAYBOOK}
  FIRST_RUN_RESULT[${IMAGE}]=$?

  # idempotence test
  IDEMPOTENCE=$(mktemp)
  docker exec ${CONTAINER_ID} ansible-playbook -i /ansible/inventory-test /ansible/${PLAYBOOK} | tee -a ${IDEMPOTENCE}
  tail ${IDEMPOTENCE} | grep -q 'changed=0.*failed=0'
  IDEMPOTENCE_RESULT[${IMAGE}]=$?
  rm ${IDEMPOTENCE}

  # functional test
  docker exec ${CONTAINER_ID} /tests/test.sh
  FUNCT_RESULT[${IMAGE}]=$?

  #stop and destroy container
  echo "[INFO] Stopping container..."
  docker stop ${CONTAINER_ID}
  echo "[INFO] Removing container..."
  docker rm -v ${CONTAINER_ID}
done

rm ${PLAYBOOK}

echo
echo "********************************************************************************"
echo
echo "[TEST RESULTS]"
echo
for IMAGE in ${IMAGES}
do
  cat <<EOT
${IMAGE}
Syntax check test   -   $(if [[ ${SYNTAX_CHECK_RESULT[${IMAGE}]} == 0 ]]; then echo SUCCESS; else echo FAILURE; fi)
First run test      -   $(if [[ ${FIRST_RUN_RESULT[${IMAGE}]} == 0 ]]; then echo SUCCESS; else echo FAILURE; fi)
Idempotence test    -   $(if [[ ${IDEMPOTENCE_RESULT[${IMAGE}]} == 0 ]]; then echo SUCCESS; else echo FAILURE; fi)
Functional test     -   $(if [[ ${FUNCT_RESULT[${IMAGE}]} == 0 ]]; then echo SUCCESS; else echo FAILURE; fi)

EOT
done
